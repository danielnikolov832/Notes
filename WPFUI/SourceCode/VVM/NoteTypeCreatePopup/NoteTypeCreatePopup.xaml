<UserControl x:Class="WPFUI.VVM.NoteTypeCreatePopup.NoteTypeCreatePopup"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:WPFUI.VVM.NoteTypeCreatePopup"
             
             xmlns:syncfusion = "http://schemas.syncfusion.com/wpf"
             
             xmlns:localMainWindowViewModels = "clr-namespace:WPFUI.VVM.NoteTypeCreatePopup"
             
             xmlns:i = "http://schemas.microsoft.com/xaml/behaviors"
             
             mc:Ignorable="d"
             d:DesignHeight="450" d:DesignWidth="400">

    <UserControl.DataContext>
        <localMainWindowViewModels:NoteTypeCreatePopupViewModel/>
    </UserControl.DataContext>

    <i:Interaction.Triggers>
        <i:DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=UserControl}, Path=Visibility}" Value="Hidden">
            <i:InvokeCommandAction Command="{x:Static ApplicationCommands.Delete}"/>
        </i:DataTrigger>
    </i:Interaction.Triggers>

    <Grid>

        <Grid.RowDefinitions>
            <RowDefinition Height="1.6*"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="40"/>
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="2*"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <Grid Background="White">
            
            <Grid.RowDefinitions>
                <RowDefinition Height="10"/>
                <RowDefinition Height="20"/>
                <RowDefinition Height="5"/>
                <RowDefinition Height="25"/>
                <RowDefinition Height="10"/>
                <RowDefinition Height="35"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="35"/>
            </Grid.RowDefinitions>

            <TextBlock Grid.Row="1"
                       Text="Give a name for this type of note:"
                       Margin="15, 0, 0, 0"/>

            <TextBox Grid.Row="3"
                     Text="{Binding getset_selectedTypeName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                     Margin="15, 0, 15, 0"
                     Padding="0, 5, 0, 5"
                     BorderThickness="1, 1, 1, 2.5"
                     BorderBrush="Black"/>

            <TextBlock Grid.Row="5"
                       Text="Select Properties to add to the type of note &#x0a;(all are selected by default):"
                       Margin="15, 0, 0, 0"/>

            <ListView Grid.Row="6"
                      Margin="10, 0, 10, 5"
                      BorderThickness="1"
                      BorderBrush="Black"
                      ItemsSource="{Binding get_itemsSourceForPropsListView}"
                      Style="{StaticResource NoteTypeCreatePropertyListViewStyle}"/>

            <TextBlock Grid.Row="7"
                       Text="Select children to add to the type of note &#x0a;(none are selected by default):"
                       Margin="15, 0, 0, 0"/>

        </Grid>

        <Border Grid.Row="1"
                Grid.Column="0"
                BorderThickness="10, 0, 10, 5"
                BorderBrush="White">
            
            <syncfusion:SfTreeView Background="White"
                                   BorderThickness="1"
                                   BorderBrush="Black"
                                   Style="{StaticResource NoteTreeViewStyle}"
                                   ChildPropertyName="get_unboundChildrenForTypeCreation"
                             
                                   ItemsSource="{Binding get_itemsSourceForNoteTreeView}"
                                   SelectedItem="{Binding getset_selectedNoteInNoteTreeView, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">

                <syncfusion:SfTreeView.Resources>

                    <Style TargetType="syncfusion:TreeViewItem" BasedOn="{StaticResource NoteTypeCreateSyncfusionNoteTreeViewTreeViewItemStyle}">
                    </Style>

                </syncfusion:SfTreeView.Resources>

                <syncfusion:SfTreeView.ItemTemplate>
                    <DataTemplate>
                        <Grid>

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="20"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="20"/>
                                <ColumnDefinition Width="60"/>
                            </Grid.ColumnDefinitions>

                            <CheckBox Grid.Column = "0"
                                      IsChecked = "{Binding get_isSelectedAsPartOfType, Mode = OneWay}"
                                      IsHitTestVisible="False"
                                      IsEnabled="{Binding get_parentWrapper.get_isSelectedAsPartOfType}"/>

                            <TextBlock Grid.Column = "1"
                                       Text = "{Binding getset_nameWrapperProperty}"
                                       FontSize = "10"/>

                            <Button Margin="5, 2"
                                    Grid.Column="2"
                                    Command="{Binding get_addChildCommand}"/>

                            <Button Margin="5, 2"
                                    Grid.Column="3"
                                    Command="{Binding get_recursivelySelectItemsFromNoteTreeViewCommand}"
                                    IsEnabled="{Binding get_parentWrapper.get_isSelectedAsPartOfType}">

                                <Button.Style>
                                    <Style TargetType="Button">

                                        <Setter Property="Content" Value="Add"/>

                                        <Style.Triggers>
                                            
                                            <DataTrigger Binding="{Binding get_isSelectedAsPartOfType}" Value="True">
                                                <Setter Property="Content" Value="Remove"/>
                                            </DataTrigger>

                                        </Style.Triggers>
                                        
                                    </Style>
                                </Button.Style>

                            </Button>

                        </Grid>
                    </DataTemplate>
                </syncfusion:SfTreeView.ItemTemplate>

            </syncfusion:SfTreeView>
        </Border>

        <Grid Grid.Row="1" Grid.Column="1"
              Background="White">

            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="30"/>
            </Grid.RowDefinitions>

            <ListView Background="White"
                      Grid.Row="0" Grid.Column="0"
                      ItemsSource="{Binding getset_selectedNoteInNoteTreeView.get_unboundPropertiesForTypeCreation}"
                      SelectedItem="{Binding getset_selectedValueContainerInSideListView}"
                      HorizontalContentAlignment="Stretch">

                <ListView.ItemTemplate>
                    <DataTemplate>
                        
                        <Grid>

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="30"/>
                                <ColumnDefinition MinWidth="50"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="40"/>
                            </Grid.ColumnDefinitions>

                            <CheckBox Grid.Column="0"
                                      Margin="5, 0, 0, 10"
                                      VerticalAlignment="Center"
                                      IsChecked="{Binding getset_isSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

                            <TextBox Grid.Column="1"
                                     HorizontalAlignment="Left"
                                     Text="{Binding getset_nameOfValueContainer, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

                            <syncfusion:ComboBoxAdv Grid.Column="2"
                                                    Margin="15, 0, 0, 0"
                                                    HorizontalAlignment="Left"
                                                    ItemsSource="{Binding get_itemsSourceForTypeComboBox}"
                                                    SelectedItem="{Binding getset_enumData, Mode=TwoWay}"
                                                    DisplayMemberPath="get_stringRepresentation"/>

                            <Button Grid.Column="3"
                                    BorderThickness="1"
                                    BorderBrush="Black">

                                <i:Interaction.Triggers>

                                    <i:EventTrigger EventName="Click">
                                        <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource AncestorType=UserControl}, Path=DataContext.get_removeSelectedItemFromSideListCommand}"/>
                                    </i:EventTrigger>

                                </i:Interaction.Triggers>

                                <Button.Style>
                                    <Style TargetType="Button">

                                        <Setter Property="Visibility" Value="Hidden"/>

                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ListViewItem}, Path=IsMouseOver}" Value="True">
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                        </Grid>
                        
                    </DataTemplate> 
                </ListView.ItemTemplate>

                <ListView.Resources>
                    <Style TargetType="ListViewItem" BasedOn="{StaticResource PropertyListViewListViewItemStyle}">
                        
                        <Setter Property="BorderThickness" Value="0"/>
                        <Setter Property="BorderBrush" Value="{StaticResource SelectedListViewItemLeftBorderBrush}"/>
                        
                    </Style>
                </ListView.Resources>
            </ListView>

            <Button Grid.Row="1" Grid.Column="0"
                    BorderThickness="1"
                    Margin="0, 0"
                    BorderBrush="Black">

                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <i:InvokeCommandAction Command="{Binding get_addNewItemToSideListCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Button>

        </Grid>
        
        <Grid Grid.Row="2"
              Margin="0, 0, 0, 0"
              Background="White">

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="50"/>
            </Grid.ColumnDefinitions>

            <StackPanel Orientation="Horizontal" 
                        Margin="10"
                        Grid.Column="1" Grid.ColumnSpan="2">

                <Button Background="LightGray" Foreground="Blue"
                        Margin="0, 0, 10, 0">
                    Cancel

                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="Click">
                            <i:ChangePropertyAction TargetObject="{Binding RelativeSource={RelativeSource AncestorType=UserControl}}" PropertyName="Visibility" Value="Hidden"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Button>

                <Button Background="Blue" Foreground="White"
                        Command="{Binding get_createTypeFromNoteCommand}">
                    Create

                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="Click">
                            <i:ChangePropertyAction TargetObject="{Binding RelativeSource={RelativeSource AncestorType=UserControl}}" PropertyName="Visibility" Value="Hidden"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Button>
            </StackPanel>

        </Grid>

    </Grid>

</UserControl>
<UserControl x:Class="WPFUI.VVM.PropertyListView.PropertyListView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:WPFUI.VVM.PropertyListView"
             
             xmlns:i = "http://schemas.microsoft.com/xaml/behaviors"

             xmlns:syncfusion = "http://schemas.syncfusion.com/wpf"

             xmlns:localMainWindowViewModels = "clr-namespace:WPFUI.VVM.PropertyListView"
             
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="350">

    <UserControl.DataContext>
        <local:PropertyListViewModel/>
    </UserControl.DataContext>
    
    <Grid x:Name="PropertyListViewWrapper"
          Grid.Row = "1" Grid.Column = "1" Grid.RowSpan = "2">

        <Grid.RowDefinitions>
            <RowDefinition Height = "16"/>
            <RowDefinition Height = "*"/>
            <RowDefinition Height = "50"/>
        </Grid.RowDefinitions>

        <!-- Button to create new note type and combobox that lists all note types -->

        <StackPanel Orientation = "Horizontal">
            <Button x:Name="TypeCreateButton">Create a new type from note</Button>

            <syncfusion:ComboBoxAdv ItemsSource = "{Binding get_noteTypeComboboxItemsSource}"
                                    DisplayMemberPath = "get_typeName"
                                    SelectedItem = "{Binding get_selectedItemInTypeComboBox}">

                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="SelectionChanged">
                        <i:InvokeCommandAction Command="{Binding get_switchNoteToGivenTypeCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </syncfusion:ComboBoxAdv>
        </StackPanel>

        <!-- ListView to display the properties of the note logic -->

        <ListView x:Name = "ListView"
                  Grid.Row = "1"
                  HorizontalContentAlignment="Stretch"
                  ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                  ItemsSource = "{Binding get_itemsSourceForListView}"
                  SelectedItem = "{Binding getset_selectedItemInPropertyListView, Mode = OneWayToSource}">
            <!-- ItemsSource = "{Binding get_NewSelectedItem.get_properties}" -->
            
            <ListView.ItemTemplate>

                <DataTemplate DataType="{x:Type localMainWindowViewModels:PropertyListItem}">

                    <Grid HorizontalAlignment = "Stretch">

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="0" MaxWidth="80"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width = "*"/>
                        </Grid.ColumnDefinitions>

                        <TextBox Grid.Column = "0"
                                 Text = "{Binding get_valueContainerWrapper.getset_valueContainerName, Mode = TwoWay, UpdateSourceTrigger = PropertyChanged}" 
                                 VerticalAlignment = "Top"/>

                        <!-- SelectedItem works on the premises of immediate destruction after data is changed, so its two-way for now -->
                        <syncfusion:ComboBoxAdv Grid.Column = "1"
                                                Margin = "12, 0, 12, 0"
                                                Height = "30"
                                                HorizontalAlignment = "Left"
                                                VerticalAlignment = "Top"
                                                ItemsSource = "{Binding ElementName = PropertyListViewWrapper, Path = DataContext.get_listOfAllAcceptableValuesForDataType}"
                                                SelectedItem = "{Binding getset_dataHolder, Mode = TwoWay, UpdateSourceTrigger = PropertyChanged}"
                                                DisplayMemberPath = "get_stringRepresentation">

                            <i:Interaction.Triggers>

                                <i:EventTrigger EventName = "SelectionChanged">
                                    <i:InvokeCommandAction Command = "{Binding ElementName = PropertyListViewWrapper, Path = DataContext.get_switchValueContainerWrapperToAWrapperForNeededTypeCommand}"/>
                                </i:EventTrigger>

                            </i:Interaction.Triggers>
                        </syncfusion:ComboBoxAdv>

                        <ContentPresenter Content = "{Binding get_valueContainerWrapper, Mode = OneWay, UpdateSourceTrigger = PropertyChanged}"
                                          Grid.Column = "3">

                            <ContentPresenter.Resources>

                                <DataTemplate DataType = "{x:Type localMainWindowViewModels:StringValueContainerWrapper}">
                                    <TextBox Text = "{Binding getset_objectToProvideValue, Mode = TwoWay, UpdateSourceTrigger = PropertyChanged}"
                                             Style = "{StaticResource {x:Type TextBox}}">
                                    </TextBox>
                                </DataTemplate>

                                <DataTemplate DataType = "{x:Type localMainWindowViewModels:WholeNumberValueContainerWrapper}">
                                    <syncfusion:IntegerTextBox Value = "{Binding getset_objectToProvideValue, Mode = TwoWay, UpdateSourceTrigger = PropertyChanged}"
                                                               Style = "{StaticResource ValueContainerWrapperIntegerTextBoxStyle}"/>
                                </DataTemplate>

                                <DataTemplate DataType = "{x:Type localMainWindowViewModels:NotWholeNumberValueContainerWrapper}">
                                    <syncfusion:CurrencyTextBox Value = "{Binding getset_objectToProvideValue, Mode = TwoWay, UpdateSourceTrigger = PropertyChanged}"
                                                                Style = "{StaticResource ValueContainerWrapperCurrencyTextBoxStyle}"/>
                                </DataTemplate>

                                <DataTemplate DataType = "{x:Type localMainWindowViewModels:CurrencyValueContainerWrapper}">

                                    <Grid>

                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>

                                        <syncfusion:ComboBoxAdv Grid.Column="0"
                                                                ItemsSource = "{Binding get_cultureCurrencySymbolAndNamesData, Mode = OneWay}"
                                                                SelectedItem = "{Binding getset_valueHolder, Mode = TwoWay}"
                                                                Width = "60"
                                                                ScrollViewer.HorizontalScrollBarVisibility = "Disabled"
                                                                AutoCompleteMode = "Suggest">

                                            <syncfusion:ComboBoxAdv.Resources>

                                                <Style TargetType = "Popup">
                                                    <Setter Property = "MaxWidth" Value = "300"/>
                                                </Style>

                                            </syncfusion:ComboBoxAdv.Resources>

                                            <syncfusion:ComboBoxAdv.ItemTemplate>
                                                <DataTemplate>

                                                    <StackPanel Orientation = "Horizontal">
                                                        <TextBlock Text = "{Binding get_CurrencySymbol}"
                                                                   Width="30"/>
                                                        <TextBlock Text = "("/>
                                                        <TextBlock Text="{Binding get_ISOCurrencySymbol}"/>
                                                        <TextBlock Text = ")"/>
                                                        <TextBlock Text = " - "/>
                                                        <TextBlock Text = "{Binding get_CurrencyEnglishName}"/>
                                                    </StackPanel>

                                                </DataTemplate>
                                            </syncfusion:ComboBoxAdv.ItemTemplate>

                                        </syncfusion:ComboBoxAdv>

                                        <syncfusion:CurrencyTextBox Grid.Column="1"
                                                                    Value = "{Binding getset_objectToProvideValue, Mode = TwoWay, UpdateSourceTrigger = PropertyChanged}"
                                                                    CurrencySymbol = "{Binding getset_valueHolder.get_CurrencySymbol}"
                                                                    Style = "{StaticResource ValueContainerWrapperCurrencyTextBoxStyle}"/>

                                    </Grid>

                                </DataTemplate>

                                <DataTemplate DataType = "{x:Type localMainWindowViewModels:CheckmarkValueContainerWrapper}">
                                    <CheckBox IsChecked = "{Binding Path = getset_objectToProvideValue, Mode = TwoWay, UpdateSourceTrigger = PropertyChanged}"/>
                                </DataTemplate>

                                <DataTemplate DataType = "{x:Type localMainWindowViewModels:DateValueContainerWrapper}">
                                    <syncfusion:SfDatePicker Value = "{Binding Path = getset_objectToProvideValue, Mode = TwoWay, UpdateSourceTrigger = PropertyChanged}"
                                                             Style = "{StaticResource ValueContainerWrapperSfDatePickerStyle}"/>
                                </DataTemplate>

                                <DataTemplate DataType = "{x:Type localMainWindowViewModels:TimeValueContainerWrapper}">
                                    <syncfusion:SfTimePicker Value = "{Binding Path = getset_objectToProvideValue, Mode = TwoWay, UpdateSourceTrigger = PropertyChanged}"
                                                             Style = "{StaticResource ValueContainerWrapperSfTimePickerStyle}"/>
                                </DataTemplate>

                                <DataTemplate DataType = "{x:Type localMainWindowViewModels:DateAndTimeValueContainerWrapper}">

                                    <Grid>

                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>

                                        <syncfusion:SfDatePicker Grid.Column="0"
                                                                 Value = "{Binding Path = getset_objectToProvideValue, Mode = TwoWay, UpdateSourceTrigger = PropertyChanged}"
                                                                 Style = "{StaticResource ValueContainerWrapperSfDatePickerStyle}"/>

                                        <syncfusion:SfTimePicker Grid.Column="1"
                                                                 Value = "{Binding Path = getset_objectToProvideValue, Mode = TwoWay, UpdateSourceTrigger = PropertyChanged}"
                                                                 Style = "{StaticResource ValueContainerWrapperSfTimePickerStyle}"/>

                                    </Grid>

                                </DataTemplate>

                            </ContentPresenter.Resources>
                        </ContentPresenter>

                    </Grid>

                </DataTemplate>

            </ListView.ItemTemplate>

            <ListView.ItemContainerStyle>
                <Style TargetType = "ListViewItem" BasedOn="{StaticResource PropertyListViewListViewItemStyle}">

                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="BorderBrush" Value="{StaticResource SelectedListViewItemLeftBorderBrush}"/>

                </Style>
            </ListView.ItemContainerStyle>

            <ListView.Style>
                <Style TargetType="ListView">
                    <Style.Resources>
                        <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black"/>
                        <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent"/>
                    </Style.Resources>

                    <Style.Triggers>
                        
                    </Style.Triggers>
                </Style>
            </ListView.Style>

        </ListView>

        <Button Grid.Row = "2">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName = "Click">
                    <i:InvokeCommandAction Command = "{Binding get_addNewPropertyToNoteCommand}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </Button>

    </Grid>

</UserControl>
